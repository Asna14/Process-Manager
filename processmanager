import os
import signal

def display_table(data, headers):
    header = " | ".join(headers)
    line = "-" * len(header)
    print(f"\n{header}\n{line}")
    for row in data:
        print(" | ".join(str(item) for item in row))

def create_processes(process_list):
    num_processes = int(input("Enter the number of processes to create: "))
    for i in range(num_processes):
        print(f"\nEnter details for Process {i + 1}:")
        burst_time = int(input("Enter Burst Time: "))
        priority = int(input("Enter Priority: "))
        arrival_time = int(input("Enter Arrival Time: "))
        process_id = len(process_list) + 1  # Auto-generate Process ID
        process_list.append({
            'PID': process_id,
            'Burst Time': burst_time,
            'Priority': priority,
            'Arrival Time': arrival_time,
            'State': 'Running'  # Add process state
        })

def update_process(process_list):
    display_table(
        [[p['PID'], p['Burst Time'], p['Priority'], p['Arrival Time'], p['State']] for p in process_list],
        ["PID", "Burst Time", "Priority", "Arrival Time", "State"]
    )
    pid = int(input("Enter the Process ID to update: "))
    for process in process_list:
        if process['PID'] == pid:
            print("\nUpdating Process:")
            process['Burst Time'] = int(input("Enter new Burst Time: "))
            process['Priority'] = int(input("Enter new Priority: "))
            process['Arrival Time'] = int(input("Enter new Arrival Time: "))
            print("Process updated successfully!")
            return
    print("Process ID not found.")

def terminate_process(process_list):
    pid = int(input("Enter the Process ID to terminate: "))
    for process in process_list:
        if process['PID'] == pid:
            process['State'] = 'Terminated'
            print(f"Process {pid} terminated successfully!")
            return
    print("Process ID not found.")

def pause_process(process_list):
    pid = int(input("Enter the Process ID to pause: "))
    for process in process_list:
        if process['PID'] == pid:
            process['State'] = 'Paused'
            print(f"Process {pid} paused successfully!")
            return
    print("Process ID not found.")

def resume_process(process_list):
    pid = int(input("Enter the Process ID to resume: "))
    for process in process_list:
        if process['PID'] == pid:
            if process['State'] == 'Paused':
                process['State'] = 'Running'
                print(f"Process {pid} resumed successfully!")
            else:
                print(f"Process {pid} is not paused and cannot be resumed.")
            return
    print("Process ID not found.")

def calculate_metrics(processes):
    result = []
    for p in processes:
        turnaround_time = p['Completion Time'] - p['Arrival Time']
        waiting_time = turnaround_time - p['Burst Time']
        result.append([
            p['PID'], p['Arrival Time'], p['Burst Time'], p['Priority'],
            p['Completion Time'], turnaround_time, waiting_time
        ])
    display_table(result, ["PID", "Arrival Time", "Burst Time", "Priority", "Completion Time", "Turnaround Time", "Waiting Time"])

def fcfs_scheduling(process_list):
    sorted_processes = sorted(process_list, key=lambda x: x['Arrival Time'])
    time = 0
    for process in sorted_processes:
        if process['State'] == 'Terminated':
            continue
        if time < process['Arrival Time']:
            time = process['Arrival Time']
        time += process['Burst Time']
        process['Completion Time'] = time
    print("\n--- FCFS Scheduling Results ---")
    calculate_metrics(sorted_processes)

def sjf_scheduling(process_list):
    process_list = sorted(process_list, key=lambda x: (x['Arrival Time'], x['Burst Time']))
    time = 0
    completed = []
    while process_list:
        available = [p for p in process_list if p['Arrival Time'] <= time and p['State'] != 'Terminated']
        if available:
            shortest_job = min(available, key=lambda x: x['Burst Time'])
            process_list.remove(shortest_job)
            time = max(time, shortest_job['Arrival Time'])
            time += shortest_job['Burst Time']
            shortest_job['Completion Time'] = time
            completed.append(shortest_job)
        else:
            time += 1
    print("\n--- SJF Scheduling Results ---")
    calculate_metrics(completed)

def priority_scheduling(process_list):
    process_list = sorted(process_list, key=lambda x: (x['Arrival Time'], x['Priority']))
    time = 0
    completed = []
    while process_list:
        available = [p for p in process_list if p['Arrival Time'] <= time and p['State'] != 'Terminated']
        if available:
            highest_priority = min(available, key=lambda x: x['Priority'])
            process_list.remove(highest_priority)
            time = max(time, highest_priority['Arrival Time'])
            time += highest_priority['Burst Time']
            highest_priority['Completion Time'] = time
            completed.append(highest_priority)
        else:
            time += 1
    print("\n--- Priority Scheduling Results ---")
    calculate_metrics(completed)

def round_robin_scheduling(process_list, quantum):
    queue = sorted(process_list, key=lambda x: x['Arrival Time'])
    time = 0
    completed = []
    waiting_queue = []
    while queue or waiting_queue:
        if not waiting_queue:
            time = max(time, queue[0]['Arrival Time'])
            waiting_queue.append(queue.pop(0))
        current = waiting_queue.pop(0)
        if current['State'] == 'Terminated':
            continue
        execute_time = min(current['Burst Time'], quantum)
        current['Burst Time'] -= execute_time
        time += execute_time
        if current['Burst Time'] == 0:
            current['Completion Time'] = time
            completed.append(current)
        else:
            waiting_queue.append(current)
        waiting_queue.extend([p for p in queue if p['Arrival Time'] <= time and p['State'] != 'Terminated'])
        queue = [p for p in queue if p['Arrival Time'] > time or p['State'] == 'Terminated']
    print("\n--- Round Robin Scheduling Results ---")
    calculate_metrics(completed)

def main():
    process_list = []
    while True:
        print("\n--- CPU Scheduling Simulator ---")
        print("1. Create processes")
        print("2. Display processes")
        print("3. Update process")
        print("4. Terminate process")
        print("5. Pause process")
        print("6. Resume process")
        print("7. First Come First Serve (FCFS)")
        print("8. Shortest Job First (SJF)")
        print("9. Priority Scheduling")
        print("10. Round Robin Scheduling")
        print("0. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            create_processes(process_list)
        elif choice == "2":
            if process_list:
                display_table(
                    [[p['PID'], p['Burst Time'], p['Priority'], p['Arrival Time'], p['State']] for p in process_list],
                    ["PID", "Burst Time", "Priority", "Arrival Time", "State"]
                )
            else:
                print("No processes available.")
        elif choice == "3":
            if process_list:
                update_process(process_list)
            else:
                print("No processes available to update.")
        elif choice == "4":
            terminate_process(process_list)
        elif choice == "5":
            pause_process(process_list)
        elif choice == "6":
            resume_process(process_list)
        elif choice == "7":
            fcfs_scheduling(process_list)
        elif choice == "8":
            sjf_scheduling(process_list.copy())
        elif choice == "9":
            priority_scheduling(process_list.copy())
        elif choice == "10":
            if process_list:
                quantum = int(input("Enter Time Quantum: "))
                round_robin_scheduling(process_list.copy(), quantum)
            else:
                print("No processes available to schedule.")
        elif choice == "0":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
